// pages/zwxq/zwxq.js
const $ = require('../../utils/request_util');
const string_util = require('../../utils/string_util');
const url_util = require('../../utils/url_util');
const img_util = require('../../utils/img_util');
const Loading = require('../../utils/loading_util');


const { UserService } = require('../../service/user_service');
const userRecruiterService = require('../../common/userRecruiterService');
const userCandidateService = require('../../common/userCandidateService');

const recruitCompanyService = require('../../common/recruitCompanyService');
const recruitJobService = require('../../common/recruitJobService');
const recruitRecordService = require('../../common/recruitRecordService');
const CONSTANT = require('../../common/constant');
const { Salary } = require('../../common/constant');
const { loadRecruitCompanyById } = require('../../common/recruitCompanyService');

const app = getApp();
Page({

    /**
     * 页面的初始数据
     */
    data: {
        // 求职者信息
        flagWhoReceive: 1,

        // 各个id
        candidateOpenid: '',
        candidateTelephone: '',

        recruiterName: '',
        recruiterPortrait: '',

        recruiterOpenid: '',
        companyUuid: '',
        jobUuid: '',
        categoryUuid: '',
        // 招聘者信息
        jobName: '清洁工',
        salaryScope: '3000-3800',
        jobyq: { rs: '招1人' },
        // jobyq: { rs: '招1人', nl: '30-45', worknj: '3-5', xl: '学历不限' },
        xqxq: '1.工作职责: 室内保洁人员主要负责办公楼、仪电楼、化工楼内公共区域的清扫工作。 室外保洁	2.卫生标准及要求:3.室内保洁: 保持走廊地面无脚印、无口香糖印,夏季地面无土,冬季无结冰下',
        location: '银盆岭社区长沙市岳麓区国际公寓A座1917',
        companyName: '',
        conadrres: '',
        portraitPath: '',
        recruiterTelephone: '',
        ident: "user",
        nowsf: "",


    },
    // 聊一聊
    talk() {
        let ident = this.data.ident
        wx.navigateTo({
            url: '/pages/talkjobcom/talkjobcom?userident=' + ident,
        })
    },
    //投递简历
    async tdjl(e) {
        let that = this;
        if (string_util.isEmpty(this.data.candidateTelephone)) {
            wx.showModal({
                title: '提示',
                content: '请先在个人简历中填写联系方式',
                confirmText: "跳转",
                success(res) {
                    wx.redirectTo({
                        url: '/pages/jlxg/jlxg?nowsf=' + that.data.nowsf,
                    })
                }
            });

            return;
        };
        console.log('用户点击确定')
        // 如果用户已经投递过
        let queryData = {
            candidateOpenid: that.data.candidateOpenid,
            jobUuid: that.data.jobUuid,
        }
        let countData = await recruitRecordService.countByEntity(queryData);
        console.log(countData)
        if (countData.data > 0) {
            wx.showToast({
                icon: 'none',
                title: `您已经投递过该职位`,
                duration: 2000,
            })
            return;
        }
        // 生成简历记录
        let insertData = {
            flagWhoReceive: that.data.flagWhoReceive,
            flowRecruit: 0, // 待查看
            candidateOpenid: that.data.candidateOpenid,
            recruiterOpenid: that.data.recruiterOpenid,
            companyUuid: that.data.companyUuid,
            jobUuid: that.data.jobUuid,
            categoryUuid: that.data.categoryUuid,
        }
        let insertPromise = recruitRecordService.insertByEntity(insertData);
        await insertPromise
            .then(r => console.log(r))
            .catch(r => console.error(r));
        // 生成投递记录
        await recruitJobService.increaseCountApply(that.data.jobUuid);
        // 通知监听器
        app.globalMonitors.sendResumeMonitor.notifyAll(that.data.jobUuid)
        // 跳转到首页
        wx.showModal({
            title: '成功',
            content: '投递成功，是否返回首页',
            success(res) {
                if (res.confirm) {
                    wx.switchTab({
                        url: '/pages/index/index',
                    })
                } else if (res.cancel) {
                    console.log('用户点击取消')
                }
            }
            // icon: 'success',
            // duration: 2000,
            // success(){
            // 	console.log("323")
            // 	wx.switchTab({
            // 		url: '/pages/index/index',
            // 	})
            // }
        })

    },
    binderrorRecruiterPortrait: function (e) {
        console.error(e);
        this.setData({
            portraitPath: Boolean(this.data.recruiterGender) ?
                CONSTANT.STATIC_IMG_URL.portrait_personal_female : CONSTANT.STATIC_IMG_URL.portrait_personal_male,
        })
    },

    //  错误头像 显示默认头像
    binderrorCompanyPortrait: function (e) {
        console.error(e);
        this.setData({
            portraitPath: CONSTANT.STATIC_IMG_URL.portrait_company,
        })
    },
    callPhone(e) {
        console.log(this.data);
        wx.makePhoneCall({
            phoneNumber: this.data.recruiterTelephone,
        })
    },
    /**
     * 生命周期函数--监听页面加载
     */
    onLoad: async function (options) {
        let that = this;
        let recruitJobUuid = this.options.recruitJobUuid;
        // 获取用户openid
        await app.getOpenidReady();
        let openid = wx.getStorageSync('openid');
        that.setData({
            candidateOpenid: openid,
        });
        // 加载全局 角色
        let role = await UserService.loadUserRole();
        if (role == CONSTANT.UserRole.Recruitee) {
            this.setData({
                nowsf: CONSTANT.userRoleName[role],
            })
        } else if (role == CONSTANT.UserRole.Recruiter) {
            this.setData({
                nowsf: CONSTANT.userRoleName[role],
            })
        }
        try {
            Loading.begin();
            // 加载求职者信息
            let loadCandidatePromise = userCandidateService.loadEntityById(openid);
            await loadCandidatePromise.then(r => {
                this.setData({
                    candidateTelephone: r.data.telephone,
                });
            }).catch(e => { console.error(e) });
            // 加载岗位信息
            let jobData = await recruitJobService.loadEntityById(recruitJobUuid);
            jobData = jobData.data;
            this.setData({
                // 公司id
                recruiterOpenid: jobData.recruiterOpenid,
                companyUuid: jobData.companyUuid,
                jobUuid: jobData.id,
                categoryUuid: jobData.categoryUuid,
                // 表单信息加载
                jobName: jobData.jobName,
                salaryScope: new Salary(jobData.jobSalaryMin, jobData.jobSalaryMax).value,
                jobyq: { rs: '招 ' + jobData.recruitingNumber + ' 人' },
                xqxq: jobData.jobIntroduction,
                recruiterTelephone: jobData.recruiterTelephone,
            })
            // 加载求职者信息
            let recruiterInfo = await userRecruiterService.loadEntityById(jobData.recruiterOpenid);
            recruiterInfo = recruiterInfo.data;
            this.setData({
                recruiterName: recruiterInfo.realName,
                recruiterGender: recruiterInfo.gender,
                recruiterPortrait: img_util.handlePersonnelPortraitPath(recruiterInfo.portraitPath, recruiterInfo.gender),
            })
            // 加载公司信息
            let loadRecruitCompanyPromise = recruitCompanyService.loadEntityById(this.data.companyUuid);
            await loadRecruitCompanyPromise.then(r => {
                let companyData = r.data;
                this.setData({
                    companyName: companyData.companyName,
                    conadrres: companyData.address + '  ' + r.data.addressDetail,
                    portraitPath: img_util.handleCompanyPortraitPath(companyData.portraitPath),
                })
            }).catch(e => { console.error(e) });
        } catch (e) {
            console.error(e);
        } finally {
            Loading.end();
        }




    },

    /**
     * 生命周期函数--监听页面初次渲染完成
     */
    onReady: function () {

    },

    /**
     * 生命周期函数--监听页面显示
     */
    onShow: function () {

    },

    /**
     * 生命周期函数--监听页面隐藏
     */
    onHide: function () {

    },

    /**
     * 生命周期函数--监听页面卸载
     */
    onUnload: function () {

    },

    /**
     * 页面相关事件处理函数--监听用户下拉动作
     */
    onPullDownRefresh: function () {

    },

    /**
     * 页面上拉触底事件的处理函数
     */
    onReachBottom: function () {

    },

    /**
     * 用户点击右上角分享
     */
    onShareAppMessage: function (res) {
        if (res.from === 'button') {
            // 来自页面内转发按钮
            title = "这个是页面自定义的分享事件~";
            // imageUrl='***.png';
        }
        if (res.from === 'menu') {
            title = "这个是页面右上角的分享事件~";
            // imageUrl='***.png';
        }
    },
    onShareTimeline(res) {
        console.log(res)
    }
})