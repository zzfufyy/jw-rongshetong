const {
    Completer
} = require('./utils/function_util');
const function_util = require('./utils/function_util');
const Global = require('./service/global_service');
const GLOBAL_CONSTANT = require('./common/globalConstant');

const iAuthorizeService = require('./common/iAuthorizeService');
// app.js
App({
    globalData: {
        web_path: "https://jw.csjing.com", //线上
        // web_path : "http://localhost:8083",//测试
        // web_path: "https://localhost:443",//测试
        header: {
            Token: "",
            Cookie: "",
            'content-type': 'application/x-www-form-urlencoded'
        },
        "appId": "wx7741a14f2a4e3776", //测试
        //   "appId" : "wx96d6e30c9f677d52",
        userInfo: {},
        openidReady: null,

        // 开关值
        isOnShow: true,

    },

    state: {
        openidReady: null,
        // openid 的完成器，用于手动完成 openid 的 promise（即 openidReady）
        openidCompl: null,
        // 当前的 openid
        openid: null,
        // app初始化完毕
        appInitCompleter: null,

    },
    globalMonitors: {
        // 发送简历监听器
        sendResumeMonitor: function_util.getInstanceOfListenable(),
        // 用户角色转换监听器
        userRoleChangeMonitor: function_util.getInstanceOfListenable(),
        // 定位修改 监听器
        userLocationChangeMonitor: function_util.getInstanceOfListenable(),
        // 社区基本信息修改监听器(社区服务 用)
        communityInfoChangeMonitor: function_util.getInstanceOfListenable(),
        // 用户是否填写 个人电话
        candidateTelephoneChangeMonitor: function_util.getInstanceOfListenable(),
        // 功能列表 监听器
        functionTagChangeMonitor: function_util.getInstanceOfListenable(),
    },

    getOpenid: function () {
        if (!this.state.openid) {
            console.error("openid 还没有加载完成");
        }
        return this.state.openid;
    },

    getOpenidReady() {
        if (!this.state.openidReady) {
            console.error('openidReady 还没有实例化');
        }
        return this.state.openidReady;
    },
    // 获取app是否初始化完毕
    getAppInitReady() {
        if (!this.state.appInitCompleter) {
            console.error("app初始化未完成")
        }
        return this.state.appInitCompleter.promise;
    },

    getGlobal(k) {
        let v = this.state.globalService.get(k);
        console.debug(`获取全局值<${k},${v}>`);
        return v;
    },

    setGlobal(k, v) {
        console.debug(`设置全局值<${k},${v}>`);
        return this.state.globalService.set(k, v);
    },

    // 全局初始化
    async onLaunch() {
        // 初始化 app是否init
        this.state.appInitCompleter = new Completer();
        // 初始化 openid是否获取
        let openidReadyCompl = new Completer();
        this.state.openidCompl = openidReadyCompl;
        this.state.openidReady = openidReadyCompl.promise;
        // 初始化全局变量（例如监听器等）
        this._initGlobal();

        // 版本更新
        console.info("app init - _doUpdate begin");
        await this._doUpdate();
        console.info("app init - _doUpdate end");
        // 系统参数
        console.info("app init - _doGetSystemInfo begin");
        await this._doGetSystemInfo();
        console.info("app init - _doGetSystemInfo end");
        // login 获取openid
        console.info("app init - _doLogin begin");
        await this._doLogin();
        console.info("app init - _doLogin end");
        // 初次授权录音、视频
        await iAuthorizeService.authorizeRecord();
        await iAuthorizeService.authorizeCamera();
        // 授权完成
        this.state.appInitCompleter.resolve(true);
        console.info("app初始化完成");
    },

    _initGlobal() {
        // 初始化 自建房信息收集 是否提交
        wx.setStorageSync(GLOBAL_CONSTANT.GLOBAL_INFROMATION_COLLECT_SUBMIT, false);
        // 全局数据存储
        this.state.globalService = new Global.GlobalService(this);
        Global.initGlobal(this);
    },
    //检查更新
    async _doUpdate() {
        return new Promise(async (resolve, reject) => {
            if (wx.canIUse('getUpdateManager')) {
                const updateManager = wx.getUpdateManager();
                let hasUpdate = await new Promise((resolve, reject) => {
                    updateManager.onCheckForUpdate(res => {
                        resolve(res.hasUpdate);
                    });
                });
                if (hasUpdate) {
                    updateManager.onUpdateReady(function () {
                        wx.showModal({
                            title: "更新提示",
                            content: "新版本已经准备好，是否重启应用?",
                            success: res => {
                                if (res.confirm) {
                                    console.debug('user click update for new version, restart ..');
                                    updateManager.applyUpdate();
                                    resolve();
                                } else {
                                    console.debug('user click cancel update for new version');
                                    resolve();
                                }
                            },
                        });

                    })
                    updateManager.onUpdateFailed(function () {
                        wx.showModal({
                            title: '更新提示',
                            content: '下载新版本失败，请手动更新',
                            complete: () => {
                                resolve();
                            }
                        })
                    })
                } else {
                    resolve();
                }
            }
        })


    },
    // 获取系统信息
    async _doGetSystemInfo() {
        let getSystemInfoCompleter = new Completer();
        // 获取顶部栏信息
        wx.getSystemInfo({
            success: res => {
                // console.log(res)
                //导航高度
                this.globalData.arrij = res
                this.globalData.navHeight = res.statusBarHeight + 46;
                getSystemInfoCompleter.resolve()
            },
            fail(err) {
                console.log(err);
                getSystemInfoCompleter.resolve()
            }
        })
        return getSystemInfoCompleter.promise;
    },
    // 登录
    async _doLogin() {
        let openidCompl = this.state.openidCompl;
        var that = this;
        // 登录
        wx.login({
            success: res => {
                console.log(res)
                // 发送 res.code 到后台换取 openId, sessionKey, unionId
                if (res.code) {
                    wx.request({
                        url: that.globalData.web_path + '/wx/user/' + that.globalData.appId + '/login',
                        data: {
                            code: res.code,
                            loginType: 'openid'
                        },
                        header: that.globalData.header,
                        success: function (res) {
                            console.info(`当前登录用户的 openid 为 ${res.data.data.openid}`);
                            console.log(res);

                            // 将openid  缓存
                            let openid = res.data.data.openid;
                            wx.setStorageSync('openid', openid);
                            wx.setStorageSync('sessionKey', res.data.data.sessionKey);

                            // 已经完成了 openid 的获取
                            openidCompl.resolve(openid);
                            that.state.openid = openid;
                        },
                        fail: function (e) {
                            // 获   取失败，需要查看控制台错误信息
                            openidCompl.reject(e);
                        }
                    });
                }
            }
        });
        return this.state.openidCompl.promise;
    },





    //时间戳格式化

    formatDate: function (now, mask) {
        var d = new Date(now);
        var zeroize = function (value, length) {
            if (!length) length = 2;
            value = String(value);
            for (var i = 0, zeros = ''; i < (length - value.length); i++) {
                zeros += '0';
            }
            return zeros + value;
        };
        return mask.replace(/"[^"]*"|'[^']*'|\b(?:d{1,4}|m{1,4}|yy(?:yy)?|([hHMstT])\1?|[lLZ])\b/g, function ($0) {
            switch ($0) {
                case 'd':
                    return d.getDate();
                case 'dd':
                    return zeroize(d.getDate());
                case 'ddd':
                    return ['Sun', 'Mon', 'Tue', 'Wed', 'Thr', 'Fri', 'Sat'][d.getDay()];
                case 'dddd':
                    return ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][d.getDay()];
                case 'M':
                    return d.getMonth() + 1;
                case 'MM':
                    return zeroize(d.getMonth() + 1);
                case 'MMM':
                    return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][d.getMonth()];
                case 'MMMM':
                    return ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'][d.getMonth()];
                case 'yy':
                    return String(d.getFullYear()).substr(2);
                case 'yyyy':
                    return d.getFullYear();
                case 'h':
                    return d.getHours() % 12 || 12;
                case 'hh':
                    return zeroize(d.getHours() % 12 || 12);
                case 'H':
                    return d.getHours();
                case 'HH':
                    return zeroize(d.getHours());
                case 'm':
                    return d.getMinutes();
                case 'mm':
                    return zeroize(d.getMinutes());
                case 's':
                    return d.getSeconds();
                case 'ss':
                    return zeroize(d.getSeconds());
                case 'l':
                    return zeroize(d.getMilliseconds(), 3);
                case 'L':
                    var m = d.getMilliseconds();
                    if (m > 99) m = Math.round(m / 10);
                    return zeroize(m);
                case 'tt':
                    return d.getHours() < 12 ? 'am' : 'pm';
                case 'TT':
                    return d.getHours() < 12 ? 'AM' : 'PM';
                case 'Z':
                    return d.toUTCString().match(/[A-Z]+$/);
                default:
                    return $0.substr(1, $0.length - 2);
            }
        });
    },
})