// pages/searchpage/searchpage.js
const Loading = require('../../utils/loading_util');
const CONSTANT = require('../../common/constant');
const { Salary, UserRole } = require('../../common/constant');
const GLOBAL_CONSTANT = require('../../common/globalConstant');
const { Completer } = require('../../utils/function_util');
const userStateService = require('../../common/userStateService');
const userCandidateService = require('../../common/userCandidateService');
const recruitRecordService = require('../../common/recruitRecordService');
const recruitJobService = require('../../common/recruitJobService');
const string_util = require('../../utils/string_util');
const { UserService } = require('../../service/user_service');
const { CompanyService } = require('../../service/company_service');
// 加载服务
const app = getApp();
// 附加模块
const qzjyEx = require('./qzjyEx');
const listener = require('./listener');
Page({
    /**
     * 页面的初始数据
     */
    data: {
        vedio_data: [
            { bac: 'linear-gradient(180deg, #7CCCFB 0%, #1BA2F6 100%)', xdname: '春风行动线上专区', url: '', id: 0, img: '/img/cfxd.png' },
            { bac: 'linear-gradient(180deg, #FFDC69 0%, #FFAC30 100%)', xdname: '高校毕业生专场', url: '', id: 1, img: '/img/gxzc.png' },
            { bac: 'linear-gradient(180deg, #FFDC69 0%, #FFAC30 100%)', xdname: '高校毕业生专场', url: '', id: 1, img: '/img/gxzc.png' }
        ],
        currentId: '0',
        currentTab: '0',
        zxfj: [{ zx: '最新', id: '0' }, { zx: '附近', id: '1' },],
        yzqytab: [{ zx: '最新', id: '0' }, { zx: '附近', id: '1' },],
        tabList: [
            { name: '在招职位', checked: true, id: 0, number: 0, },
            { name: '入驻企业', checked: false, id: 1, number: 0 },
        ],
        tablIndex: 0,
        // 投递简历需要求职者电话
        candidateOpenid: '',
        candidateTelephone: '',

        searchJobText: '',
        searchCompanyText: '',
        orderTypeList: [
            { tagName: '附近', checked: true, type: CONSTANT.ORDER_TYPE.DISTANCE },
            { tagName: '最新', checked: false, type: CONSTANT.ORDER_TYPE.CREATE_TIME },

        ],
        salaryList: CONSTANT.salaryList,
        scopeList: [{ name: '全部社区', checked: true, }, { name: '当前社区', checked: false, }],
        hideSearchBar: true,
        userIdentity: '',
        // 地址信息  加载一次
        location: {
            // longitude: 0,
            // latitude: 0,
        },
        mapLocation: {
            // longitude: 0,
            // latitude: 0,
        },
        defaultLocation: {
            longitude: 0,
            latitude: 0,
        },
        jobList: [
            // { jobUuid: '', jobName: '清洁工', salaryScope: '3000-3800', companyName: '文和友餐饮有限公司', companyPortraitPath: '/img/tx.png', distance: '1.5', phone: '13112345678' },
            // { jobUuid: '', jobName: '清洁工', salaryScope: '3000-3800', companyName: '文和友餐饮有限公司', companyPortraitPath: '/img/tx.png', distance: '1.5', phone: '13112345678' },
            // { jobUuid: '', jobName: '清洁工', salaryScope: '3000-3800', companyName: '文和友餐饮有限公司', companyPortraitPath: '/img/tx.png', distance: '1.5', phone: '13112345678' }
        ],

        companyList: [
            // { companyUuid:'', companyName: '长沙竟网信息科技有限公司', companyPortraitPath: '', recruiterName: '张经理', distance: '1.5', phone: '13112345678' },
            // { companyUuid:'', companyName: '长沙竟网信息科技有限公司', companyPortraitPath: '', recruiterName: '张经理', distance: '1.5', phone: '13112345678' },
        ],

        canhgeid: '0',
        yzqygeid: '',
        // 距离
        nyxz: [
            { nl: '不限', id: 0, checked: true }, { nl: '距离最近', id: 1 }
        ],
        ident: "",
        oid: 0,
        hidesx: true,
        jobWant: false,
    },
    //定位
    async changedw(e) {

        let isContinue = await this._isUserRoleCandidate();
        if (!isContinue) {
            return;
        }

        let that = this
        let wxChooseLocation = wx.chooseLocation({
            type: 'gcj02',
        });

        wxChooseLocation.then(async res => {
            that.setData({
                mapLocation: {
                    longitude: res.longitude,
                    latitude: res.latitude,
                },
            });
            let updateData = {
                id: app.getOpenid(),
                lon: res.longitude,
                lat: res.latitude,
                address: res.address + res.name,
            }
            try {
                Loading.begin();
                await userCandidateService.updateByEntity(updateData);
                await that.initContent();
            } catch (e) {
                console.error(e);
            } finally {
                Loading.end();
            }
        }).catch(e => {
            console.info('用户取消  修改定位')
        })
    },
    // loading锁
    lock: new Loading.Lock(),
    stateCompleter: {
        userIdentityCompleter: new Completer(),
        communityUuidCompleter: new Completer(),
    },
    async catchtapChangeTab(e) {
        let currentIndex = e.currentTarget.dataset.index;
        currentTab = this.data.tabList[currentIndex];
        currentTabList = this.data.tabList;
        if (currentTab.checked) {
            return;
        } else {
            let changedTabList = currentTabList.map(v => {
                v.checked = !v.checked;
                return v;
            })
            let changedTabIndex = changedTabList.findIndex(v => { return v.checked })
            this.setData({
                tabList: changedTabList,
                tabIndex: changedTabIndex
            })
        }
    },
    async bindtapChangeOrderType(e) {
        let currentTabList = this.data.tabList;
        currentTab = currentTabList.find(v => { return v.checked })

        let currentType = e.currentTarget.dataset.type;
        let currentOrderTypeList = this.data.orderTypeList;
        let currentOrderType = currentOrderTypeList.find(v => { return v.type == currentType });
        if (currentOrderType.checked) {
            return;
        } else {
            currentOrderTypeList = currentOrderTypeList.map(v => {
                v.checked = !v.checked;
                return v;
            })
        }
        this.setData({
            orderTypeList: currentOrderTypeList,
        })
        await this.reloadContent();


    },
    // 搜索事件
    bindinputSearchJob(e) {
        this.setData({
            searchJobText: e.detail.value,
        });
    },
    async bindconfirmSearchJob(e) {
        await this.reloadContent();
    },
    bindinputSearchCompany(e) {
        this.setData({
            searchCompanyText: e.detail.value,
        });
    },
    async bindconfirmSearchCompany(e) {
        await this.reloadContent();
    },
    // 筛选事件
    bindtapShowSearchBar() {
        this.setData({
            hideSearchBar: !this.data.hideSearchBar,
        })
    },
    //重置事件
    async resetSearchJobContent() {
        this.setData({
            searchJobText: '',
            jobSalaryMin: -1,
            jobSalaryMax: -1,
            salaryList: this.data.salaryList.map(v => {
                v.checked = false;
                return v;
            })
        });
        await this.reloadContent();
    },
    async resetSearchCompanyContent() {
        this.setData({
            searchCompanyText: '',
            jobSalaryMin: -1,
            jobSalaryMax: -1,
            salaryList: this.data.salaryList.map(v => {
                v.checked = false;
                return v;
            })
        });
        await this.reloadContent();
    },
    //清空
    catchtapSearchBarClear() {
        this.setData({
            jobSalaryMin: -1,
            jobSalaryMax: -1,
            salaryList: this.data.salaryList.map(v => {
                v.checked = false;
                return v;
            }),
            scopeList: this.data.scopeList.map((v, i) => {
                v.checked = i == 0 ? true : false;
                return v;
            }),
        });
    },
    //确定
    async catchtapSearchBarConfirm() {
        let salaryList = this.data.salaryList;
        let currentIndex = salaryList.findIndex(v => {
            return v.checked;
        })
        if (currentIndex != -1) {
            let currentSalary = salaryList[currentIndex];
            this.setData({
                jobSalaryMin: currentSalary.min,
                jobSalaryMax: currentSalary.max,
            })
        } else {
            this.setData({
                jobSalaryMin: -1,
                jobSalaryMax: -1,
            })
        }
        await this.reloadContent();
        this.setData({ hideSearchBar: true })
    },
    // 选择薪资条件
    catchtapChooseSalary(e) {
        let currentIndex = e.currentTarget.dataset.index;
        let salaryList = this.data.salaryList;
        this.setData({
            salaryList: salaryList.map((v, i) => {
                v.checked = i == currentIndex ? true : false;
                return v;
            }),
        })
    },
    catchtapChooseScope(e) {
        let currentIndex = e.currentTarget.dataset.index;
        let scopeList = this.data.scopeList;
        this.setData({
            scopeList: scopeList.map((v, i) => {
                v.checked = i == currentIndex ? true : false;
                return v;
            }),
        })
    },

    // 点击跳转到对应岗位
    catchtapChooseJob(e) {
        let currentIndex = e.currentTarget.dataset.index;
        let currentJob = this.data.jobList[currentIndex];
        let jobUuid = currentJob.jobUuid;
        wx.navigateTo({
            url: '/pages/zwxq/zwxq?recruitJobUuid=' + jobUuid,
        })

    },
    //	点击跳转到对应公司
    bindtapChooseCompany(e) {
        let currentIndex = e.currentTarget.dataset.index;
        let currentCompany = this.data.companyList[currentIndex];
        let companyUuid = currentCompany.companyUuid;
        wx.navigateTo({
            url: '/pages/commessxq/commessxq?companyUuid=' + companyUuid,
        })
    },
    // 筛选事件
    sx() {
        let hidesx = !this.data.hidesx
        this.setData({
            hidesx: hidesx
        })
        this.setData({
            hideSearchBar: !this.data.hideSearchBar,
        })
    },
    //月薪
    yxxz(e) {
        let id = e.currentTarget.dataset.id
        let yxyq_list = this.data.yxyq.map((v, i) => {
            v.checked = (i == id) ? true : false;
            return v;
        })
        this.setData({
            yxyq: yxyq_list
        })
    },
    //距离
    nlfw(e) {

        let id = e.currentTarget.dataset.id
        console.log(id)
        for (let i = 0; i < this.data.nyxz.length; i++) {
            if (this.data.nyxz[i].id == id) {
                this.setData({
                    oid: id
                })
            }
        }
    },


    // 角色选择时，用户点击选择求职者
    _handleRecruiteeSelected: async function () {
        try {
            Loading.begin();
            // 获取bc_user_wx 表信息
            let openid = wx.getStorageSync('openid');
            let userCandidate = await userCandidateService.loadEntityById(openid);
            // 保存本次用户登录信息
            let updateUserState = {
                id: openid,
                userRole: 1,
            }
            await userStateService.updateByEntity(updateUserState);
            console.log(userCandidate)
            if (string_util.isEmpty(userCandidate.data.identityCard)) {
                // 还未实名认证   
                this.setData({
                    smhide: false,   // 进入实名认证
                    userIdentity: 'user',
                    openid: app.getOpenid(),
                });
            } else {
                // 已经实名认证 
                this.setData({
                    smhide: true,
                    userIdentity: 'user',
                    openid: app.getOpenid(),
                });
            }
            // 保存登录角色信息
            wx.setStorageSync(GLOBAL_CONSTANT.GLOBAL_USER_IDENTITY, 'user');
        }
        catch (e) {
            console.error(e);
        }
        finally {
            Loading.end();
        }
    },
    //打电话
    async catchtapCallJob(e) {
        let isContinue = await this._isUserRoleCandidate();
        if (!isContinue) {
            return;
        }
        let currentPhone = e.currentTarget.dataset.phone;
        wx.makePhoneCall({
            phoneNumber: currentPhone,
        })
    },
    // 切换用户
    async _isUserRoleCandidate() {
        if (this.data.jobWant == true) {
            return true
        } else {
            let wxModal = wx.showModal({
                title: '提示',
                content: '您当前身份不是求职者，需切换为求职者身份',
            });
            await wxModal.then(async res => {
                if (res.confirm) {
                    console.log('用户点击确定')
                    await this._handleRecruiteeSelected();
                    this.setData({
                        jobWant: true
                    })
                    wx.showToast({
                        title: '身份切换成功',
                        duration: 2000,
                    })
                } else if (res.cancel) {
                    console.log('用户点击取消')
                }
            });
            console.debug(`切换身份 -- ${wx.getStorageSync(GLOBAL_CONSTANT.GLOBAL_USER_IDENTITY)}完成`)
            return false;
        }
    },
    async catchtapCallCompany(e) {
        let isContinue = await this._isUserRoleCandidate();
        if (!isContinue) {
            return;
        }
        let currentPhone = e.currentTarget.dataset.phone;
        wx.makePhoneCall({
            phoneNumber: currentPhone,
        })
    },
    //清空
    clear() {
        console.log(this.data.yxyq)
        let yxyqList = this.data.yxyq.map((v) => {
            v.checked = false;
            return v;
        })
        console.log(yxyqList);
        for (let q = 0; q < this.data.nyxz.length; q++) {
            this.setData({
                oid: 100
            })
        }
        this.setData({
            yxyq: yxyqList
        })
    },
    //投递简历
    async catchtapSendResume(e) {
        let that = this;
        let isContinue = await this._isUserRoleCandidate();
        if (!isContinue) {
            return;
        }
        let currentItem = e.currentTarget.dataset.item
        let candidateOpenid = wx.getStorageSync('openid');
        console.log(e.currentTarget)
        console.log(this.data.candidateTelephone)

        if (currentItem.flagApply) {
            wx.showToast({
                title: '您已投递',
                duration: 1500,
            })
            return;
        } else {
            let HasCandidatePhone = false;
            // 判断是否 已填写电话
            if (string_util.isEmpty(this.data.candidateTelephone)) {
                let showModalPromise = wx.showModal({
                    title: '提示',
                    content: '请先在个人简历中填写联系方式',
                    confirmText: "跳转",
                });
                await showModalPromise.then(v => {
                    if (v.confirm) {
                        wx.navigateTo({
                            url: '/pages/jlxg/jlxg?nowsf=' + that.data.nowsf,
                        })
                    } else if (v.cancel) {
                        return
                    }
                }).catch(e => console.error(e));
            } else {
                HasCandidatePhone = true;
            }
            if (!HasCandidatePhone) {
                return;
            }
            // 投递简历生成应聘信息

        }
        let index = e.currentTarget.dataset.index;
        // 生成简历记录
        console.log(currentItem);
        let insertData = {
            flagWhoReceive: 1,
            flowRecruit: 0,
            candidateOpenid: candidateOpenid,
            recruiterOpenid: currentItem.recruiterOpenid,
            companyUuid: currentItem.companyUuid,
            jobUuid: currentItem.jobUuid,
            categoryUuid: currentItem.categoryUuid,
        }
        try {
            Loading.begin();
            await recruitRecordService.insertByEntity(insertData);
            // 投递简历 次数 ++
            await recruitJobService.increaseCountApply(currentItem.jobUuid);
            // 优化用户体验 这里修改页面数据
            this.setData({
                ['jobList[' + index + '].flagApply']: true,
                ['jobList[' + index + '].flagApplyText']: '已投递',
            })
            wx.showToast({
                title: '投递成功',
                duration: 2000,
            })
        } catch (e) {
            console.error(e);
            wx.showToast({
                title: '投递失败',
                duration: 2000,
            })
        } finally {
            Loading.end();
        }
    },
    async reloadContent() {
        try {
            if (!this.lock.isLock) {
                Loading.begin(this.lock)
                await this.clearContent();
                await this.loadContent();
            } else { return; }
        } catch (e) {
            console.error(e);
        } finally {
            Loading.end(this.lock);
        }
    },
    /**
     * 生命周期函数--监听页面卸载
     */
    onUnload: function () {
        app.globalMonitors.sendResumeMonitor.removeListener(this.sendResumeListener);
        app.globalMonitors.candidateTelephoneChangeMonitor.removeListener(this.candidateTelephoneListener);
    },
    /**
     * 生命周期函数--监听页面加载
     */
    onLoad: async function (options) {

        app.globalMonitors.sendResumeMonitor.addListener(this.sendResumeListener);
        app.globalMonitors.candidateTelephoneChangeMonitor.addListener(this.candidateTelephoneListener);

        let openid = wx.getStorageSync('openid');
        this.setData({
            candidateOpenid: openid,
        })
        let userRole = wx.getStorageSync(GLOBAL_CONSTANT.GLOBAL_USER_IDENTITY);
        if (userRole) {
            this.setData({
                jobWant: userRole == 'user' ? true : false,
                userIdentity: userRole
            });
        } else {
            let userStateData = await userStateService.loadEntityById(openid);
            userStateData = userStateData.data;
            this.setData({
                jobWant: userRole == 'user' ? true : false,
            });
            let tmpIdent;
            switch (userStateData.userRole) {
                case 1: tmpIdent = 'user'; break;
                case 2: tmpIdent = 'company'; break;
                default: tmpIdent = 'vistor'; break;
            }
            this.setData({ userIdentity: tmpIdent });
        }
        // 初始化loading锁
        this.lock = new Loading.Lock();
        // 搜索栏 月薪要求  添加薪资不限
        let salaryList = this.data.salaryList;
        salaryList.unshift(new Salary(-1, -1))
        this.setData({
            salaryList: salaryList.map(v => {
                v.checked = false;
                return v;
            }),
        })
        // 加载 candidatePhone
        try {
            let candidateData = await userCandidateService.loadEntityById(openid);
            candidateData = candidateData.data;
            this.setData({
                candidateTelephone: candidateData.telephone,
            })
        } catch (e) {
            console.error(e)
        }
        this.stateCompleter.userIdentityCompleter = new Completer();
        this.stateCompleter.communityUuidCompleter = new Completer();

        // 获取授权级别  用户角色
        let userIdentity = wx.getStorageSync(GLOBAL_CONSTANT.GLOBAL_USER_IDENTITY);
        let communityUuid = options.communityUuid;
        this.setData({
            userIdentity: userIdentity,
            communityUuid: communityUuid,
        })
        this.stateCompleter.userIdentityCompleter.resolve(userIdentity);
        this.stateCompleter.communityUuidCompleter.resolve(communityUuid);

        // 初始化入驻企业数量
        try {
            if (!this.lock.isLock) {
                Loading.begin(this.lock);
                await this.clearContent();
                await this.initContent();
            } else { return; }
        } catch (e) {
            console.error(e)
        } finally {
            Loading.end(this.lock);
        }
        let that = this
        wx.getSystemInfo({
            success: function (res) {
                that.setData({
                    winWidth: res.windowWidth,
                    winHeight: res.windowHeight,
                });
            }
        })

    },

    /**
     * 生命周期函数--监听页面初次渲染完成
     */
    onReady: function () {

    },

    /**
     * 生命周期函数--监听页面显示
     */
    onShow: function () {

    },

    /**
     * 页面上拉触底事件的处理函数
     * swipper 与 onreachBottom冲突  改为事件
     */
    reachBottom: async function () {
        try {

            if (!this.lock.isLock) {
                Loading.begin(this.lock);
                await this.loadContent();
            } else { return; }
        } catch (e) {
            console.error(e)
        } finally {
            Loading.end(this.lock);
        }



    },

    /**
     * 生命周期函数--监听页面隐藏
     */
    onHide: function () {

    },



    /**
     * 页面相关事件处理函数--监听用户下拉动作
     */
    onPullDownRefresh: function () {

    },


    /**
     * 用户点击右上角分享
     */
    onShareAppMessage: function () {

    },
    // 页面分页内容相关
    ...qzjyEx.createPageMethods(),
    // 监听器方法相关
    ...listener.createListenerMethods(),
})