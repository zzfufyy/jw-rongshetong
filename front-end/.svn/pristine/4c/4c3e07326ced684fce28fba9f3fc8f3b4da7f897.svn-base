// pages/zpzhuanc/zpzhuanc.js
// 加载 常量
const CONSTANT = require('../../common/constant');
const GLOBAL_CONSTANT = require('../../common/globalConstant');
// 加载 工具
const string_util = require('../../utils/string_util');
const img_util = require('../../utils/img_util');
const date_util = require('../../utils/date_util');
const Loading = require('../../utils/loading_util');
const { Completer } = require('../../utils/function_util')
// 加载 服务
const jobFairService = require('../../common/jobFairService');
const iUserRoleService = require('../../common/iUserRoleService');
const userCandidateService = require('../../common/userCandidateService');
const fairForCandidateService = require('../../common/fairForCandidateService');
const fairForCompanyService = require('../../common/fairForCompanyService');
// 获取应用实例
const app = getApp();
// 附加模块
// const searchpageEx = require('../../pages/qzjy/searchpageEx');
Page({

    /**
     * 页面的初始数据
     */
    data: {
        // 招聘会 id (传入)
        fairUuid: '',
        fairPortraitPath: '/img/gxbyzph.png',
        fairTitle: '2022年长沙市“高校毕业生”就业服务季专场招聘会',
        fairContent: '为深入贯彻党的十九届六中全会，经济工作会议和省弟十二次党代会精神，认真落实政府工作报告部署要求为深入贯彻党的十九届六中全会，经济工作会议和省弟十二次党代会精神，认真落实政府工作报告部署要求为深入贯彻党的十九届六中全会，经济工作会议和省弟十二次党代会精神，认真落实政府工作报告部署要求',
        fairHost: '长沙市人力资源和社会保障局长/长沙市芙蓉区人力资源和社会保障局 ',
        fairAddress: '长沙市芙蓉区湘湖街道湘湖社区',
        fairBeginTime: '2022-03-15',
        fairEndTime: '2022-05-30',
        // 内容是否显示全部
        isContentFold: false,

        isCompanySign: false,
        isCandidateSign: false,
        companySignText: '企业报名',
        candidateSignText: '求职者报名',


        currentId: '0',
        currentTab: '0',
        section: [],
        joblistyfb: [
            { jobname: '清洁工', jobmoney: '3000-3800', companylxr: '张经理', companyname: '文和友餐饮有限公司', companytx: '/img/tx.png', jl: '1.5', phonenum: '13112345678' },
            { jobname: '清洁工', jobmoney: '3000-3800', companylxr: '张经理', companyname: '文和友餐饮有限公司', companytx: '/img/tx.png', jl: '1.5', phonenum: '13112345678' },
            { jobname: '清洁工', jobmoney: '3000-3800', companylxr: '张经理', companyname: '文和友餐饮有限公司', companytx: '/img/tx.png', jl: '1.5', phonenum: '13112345678' },
            { jobname: '清洁工', jobmoney: '3000-3800', companylxr: '张经理', companyname: '文和友餐饮有限公司', companytx: '/img/tx.png', jl: '1.5', phonenum: '13112345678' },
            { jobname: '清洁工', jobmoney: '3000-3800', companylxr: '张经理', companyname: '文和友餐饮有限公司', companytx: '/img/tx.png', jl: '1.5', phonenum: '13112345678' },
            { jobname: '清洁工', jobmoney: '3000-3800', companylxr: '张经理', companyname: '文和友餐饮有限公司', companytx: '/img/tx.png', jl: '1.5', phonenum: '13112345678' },
            { jobname: '清洁工', jobmoney: '3000-3800', companylxr: '张经理', companyname: '文和友餐饮有限公司', companytx: '/img/tx.png', jl: '1.5', phonenum: '13112345678' },
        ],
        joblistyxj: [
            { comname: '长沙竟网信息科技有限公司', companytx: '/img/tx.png', companylxr: '张经理', zzjob: '5' },
            { comname: '长沙竟网信息科技有限公司', companytx: '/img/tx.png', companylxr: '张经理', zzjob: '1', },
        ],
        qzzlist: [
            {
                pertx: '/img/tx.png', pername: '张三', age: '30', sex: '男', workyear: '3', wantmoy: '5000-8000',
                wantjob: [{ jobname: '产品经理' }, { jobname: '仓储管理员' }]
            },
            {
                pertx: '/img/tx.png', pername: '李四', age: '30', sex: '女', workyear: '3', wantmoy: '5000-8000',
                wantjob: [{ jobname: '产品经理' }, { jobname: '仓储管理员' }]
            },
        ],
        pagess: 1,
    },
    lock: new Loading.Lock(),
    fairUuidCompleter: new Completer,
    //查看全部
    bindtapFoldFairContent() {
        let isContentFold = !this.data.isContentFold
        this.setData({
            isContentFold: isContentFold
        })
    },
    //点击头部导航的点击事件
    handleTap: function (e) {
        let id = e.currentTarget.id;
        if (id) {
            this.setData({
                currentId: id,
                currentTab: id,
            })
        }
    },
    // 滚动切换标签样式 
    switchTab: function (e) {
        // console.log(e) 
        var that = this;
        that.setData({
            currentTab: e.detail.current,
            currentId: e.detail.current
        });
    },
    // 点击跳转到对应岗位
    async bindtapChooseJob(e) {
        let jobData = this.data.joblist[e.currentTarget.dataset.index]
        let recruitJobUuid = jobData.jobUuid;
        try {
            Loading.begin();
        } catch (e) {
            console.log(e);
        } finally {
            Loading.end();
            wx.navigateTo({
                url: "/pages/zwxq/zwxq?recruitJobUuid=" + jobData.jobUuid,
            })
        }

    },
    //	点击跳转到对应公司
    bindtapChoosecom(e) {
        wx.navigateTo({
            url: '/pages/commessxq/commessxq',
        })
    },
    bindtapChooqzz() {
        wx.navigateTo({
            url: '/pages/loojl/lookjl',
        })
    },
    //企业报名
    async bindtapCompanySign() {

    },
    // 求职者报名
    async bindtapCandidateSign() {
        // 判断是否切换身份
        let switchRs = await iUserRoleService.trySwitchToCandidate();
        if (switchRs) {
            // 判断是否有电话
        }
        // 尝试获取是否已经报名
        await this._loadIsSign();
    },
    // 加载 - 招聘会信息
    _loadJobFairContent: async function () {
        let fairUuid = await this.fairUuidCompleter.promise;
        let jobFairData = await jobFairService.loadEntityById(fairUuid);
        jobFairData = jobFairData.data;
        this.setData({
            fairPortraitPath: img_util.handleFairPortraitPath(jobFairData.fairPortraitPath),
            fairTitle: jobFairData.fairTitle,
            fairContent: jobFairData.fairContent,
            fairHost: jobFairData.fairHost,
            fairAddress: jobFairData.fairAddress,
            fairBeginTime: date_util.dateToYYYYMMDD(jobFairData.fairBeginTime),
            fairEndTime: date_util.dateToYYYYMMDD(jobFairData.fairEndTime),
        })
    },


    /**
     * 生命周期函数--监听页面加载
     */
    onLoad: async function (options) {
        // 页面样式调整
        let that = this
        wx.getSystemInfo({
            success: function (res) {
                that.setData({
                    winWidth: res.windowWidth,
                    winHeight: res.windowHeight,
                });
            }
        })
        let section1 = [
            { name: '招聘岗位', typeId: '0', num: 0 },
            { name: '招聘企业', typeId: '1', num: 0 },
            { name: '求职者', typeId: '2', num: 0 },
        ]
        that.setData({
            section: section1
        });
        // 加载 fairUuid
        this.fairUuidCompleter = new Completer();
        let fairUuid = options.fairUuid;
        this.fairUuidCompleter.resolve(fairUuid);
        this.setData({
            fairUuid: fairUuid,
        })
        // 加载openid
        await app.getOpenidReady();
        let openid = wx.getStorageSync(GLOBAL_CONSTANT.GLOBAL_OPENID);
        this.setData({
            openid: openid,
        });
        this.bootstrap = this.selectComponent("#bootstrap");
        // 等待授权完成
        let bootstrapRs = await this.bootstrap.doAuthorize();
        if (!bootstrapRs) {
            return;
        }
        // 加载 招聘会信息
        await this._loadJobFairContent();
        console.log(wx.getStorageSync(GLOBAL_CONSTANT.GLOBAL_USER_IDENTITY))
        // 获取当前用户身份 展示是否已经报名
        await this._loadIsSign();
    },
    async _loadIsSign() {
        let userRole = wx.getStorageSync(GLOBAL_CONSTANT.GLOBAL_USER_IDENTITY);
        if (string_util.isEmpty(userRole)) {
            // 全局获取不到尝试从数据库获取
            let userStateData = await userStateService.loadEntityById(openid);
            userStateData = userStateData.data;
            switch (userStateData.userRole) {
                case 0: userRole = 'vistor'; break;
                case 1: userRole = 'user'; break;
                case 2: userRole = 'company'; break;
                default: break;
            }
        }
        switch (userRole) {
            case CONSTANT.UserRole.Recruitee:
                let isCandidateSign = await fairForCandidateService.isSign(this.data.fairUuid, this.data.openid);
                isCandidateSign = isCandidateSign.data;
                this.setData({
                    isCandidateSign: isCandidateSign,
                })
                break;
            case CONSTANT.UserRole.Recruiter:
                let isCompanySign = await fairForCompanyService.isSign(this.data.fairUuid, this.data.openid);
                isCompanySign = isCompanySign.data;
                this.setData({
                    isCompanySign: isCompanySign,
                })
                break;
            default:
                break;
        }
    },
    // await this._loadIsSign()

    /**
     * 生命周期函数--监听页面初次渲染完成
     */
    onReady: async function () {

    },

    /**
     * 生命周期函数--监听页面显示
     */
    onShow: function () {

    },

    /**
     * 生命周期函数--监听页面隐藏
     */
    onHide: function () {

    },

    /**
     * 生命周期函数--监听页面卸载
     */
    onUnload: function () {

    },

    /**
     * 页面相关事件处理函数--监听用户下拉动作
     */
    onPullDownRefresh: function () {

    },

    /**
     * 页面上拉触底事件的处理函数
     */
    onReachBottom: function () {

    },

    /**
     * 用户点击右上角分享
     */
    onShareAppMessage: function () {

    },
    // 页面分页内容相关
    // ...searchpageEx.createPageMethods()
})