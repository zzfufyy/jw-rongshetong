// pages/loojl/lookjl.js
const $ = require('../../utils/request_util');

const Loading = require('../../utils/loading_util');
const string_util = require('../../utils/string_util');
const CONSTANT = require('../../common/constant');
const date_util = require('../../utils/date_util');
const url_util = require('../../utils/url_util');

const userRecruiterService = require('../../common/userRecruiterService');
const recruitCompanyService = require('../../common/recruitCompanyService');
const recruitJobService = require('../../common/recruitJobService');
const userCandidateService = require('../../common/userCandidateService');
const candidateForCommunityService = require('../../common/candidateForCommunityService');
const candidateForCategoryService = require('../../common/candidateForCategoryService');
const recruitRecordService = require('../../common/recruitRecordService');
const constant = require('../../common/constant');

const app = getApp();
Page({

	/**
	 * 页面的初始数据
	 */
	data: {
		lll:25,
		tximg: '/img/tx.png',
		name: '张三',
		sex: '女',
		year: '24',
		gznl: '10分钟前活跃',
		yxjobname: '保洁工作',
		ygz: '3000-5000',
		qwdq: '天源社区 ',
		grjs: '接受部长分配的服务工作，向客人提供优质服务。负责开餐前的准备工作。爱护餐厅设施设备，并对其实施保养、清洁。搞好营业前后的卫生工作，保持餐厅环境整洁，确保餐具，部件等清洁完好。',
		compangjob: [
			{
				job: '服务员/保洁', companyjuli: '1.2', companylocal: '长沙县泉塘街道新长海广场', sq: '天源社区', juli: '1.2',
				tagxb: '女', tagnl: '29', taggz: '3000-5000', persontx: '/img/tx.png', personname: '张三 '
			},
		],
		callname:"",
		ypzid:"",
		cellphne: '13112345678',
		ident: 'company',
		companyUuid:"",
		invitejob:[
			// {jobname:'店长',jobmoney:'6000-7000元',id:0},
			// {jobname:'店长',jobmoney:'6000-7000元',id:1},
			// {jobname:'店长',jobmoney:'6000-7000元',id:2},
			// {jobname:'店长',jobmoney:'6000-7000元',id:3},
			// {jobname:'店长',jobmoney:'6000-7000元',id:4},
		],
		choosejob:true,
		categoryUuid:"",
	},
	// 打电话
	callnum(e) {
		let that = this
		let phonenum = e.currentTarget.dataset.cellphne
		if(phonenum!=""){
			wx.makePhoneCall({
				phoneNumber: phonenum, //仅为示例，并非真实的电话号码
			})
		}else{
			wx.showToast({
				title: '此用户暂未填写电话',
				icon: 'none'
			})
		}
		
	},
	//邀请面试
	yqms(e){
		// wx.showModal({
		// 	title: '提示',
		// 	content: '是否确认邀请面试',
		// 	success (res) {
		// 		if (res.confirm) {
		// 			wx.showToast({
		// 				title: '邀请成功',
		// 				icon: 'success',
		// 				duration: 2000
		// 			})
		// 		} else if (res.cancel) {
		// 			console.log('用户点击取消')
		// 		}
		// 	}
		// })
		let choosejob = !this.data.choosejob
		this.setData({
			choosejob:choosejob
		})
		
	},
	msxx:function(e){
		let that = this;
		wx.showModal({
			title: '提示',
			content: '是否确认进行视频面试',
			success (res) {
				if (res.confirm) {
					let openid =wx.getStorageSync('openid')
					wx.setEnable1v1Chat({
							enable: true,
							success: (e) => {
								wx.join1v1Chat({
									caller: {
										nickname: that.data.callname,
										openid: openid,
									},
									listener: {
										nickname: that.data.name,
										openid: that.data.ypzid,
									},
								});
							},
							fail: (e)=> {
								console.log(e)
							}
					})
				} else if (res.cancel) {
					console.log('用户点击取消')
				}
			}
		})
		
	
	
	},
	/**个人介绍**/
	setInputValue3: function (e) {
		console.log(e)
	},

	// 聊一聊
	talk() {
		let ident = this.data.ident
		wx.navigateTo({
			url: '/pages/talkjobcom/talkjobcom?userident=' + ident,
		})
	},
	//点击选择职位
	jobnamebox(e){
		console.log(e)
		let id = e.currentTarget.dataset.id.id
		this.setData({
			id:id
		})
	},
	//取消按钮
	qxbtn(){
		let choosejob = !this.data.choosejob
		this.setData({
			choosejob:choosejob
		})
		
	},
	//新增岗位
	addbtn(){
		wx.navigateTo({
			url: '/pages/fbjob/fbjob?tzym=jxgl',
		})
	},

	//
	async tijsq1(e){
		let that =this;
		console.log(e)
		 wx.request({
			url: app.globalData.web_path + '/cand-job/searchmsyq',
			data: {
				candidateOpenid:that.data.ypzid,
				jobUuid: that.data.id,
			},
			header: app.globalData.header,
			success:async function (res) {
				console.log(res)
				if(res.data.obj > 0){
					wx.showToast({
					icon:'none',
						title: `您已发送过面试邀请`,
						duration: 2000,
					})
					return;
				}else{
					let insertData = {
						flagWhoReceive: 0,
						flowRecruit: 2, // 待查看
						candidateOpenid: that.data.ypzid,
						recruiterOpenid: wx.getStorageSync('openid'),
						companyUuid: that.data.companyUuid,
						jobUuid: that.data.id,
						categoryUuid: that.data.categoryUuid,
					}
					let insertPromise = recruitRecordService.insertByEntity(insertData);
					await insertPromise
						.then(r => console.log(r))
						.catch(r => console.error(r));
					// 生成投递记录
					await recruitJobService.increaseCountApply(that.data.id);
					wx.showToast({
						title: '邀请成功',
						icon: 'success',
						duration: 2000
					})
				}
			},
			fail: function (res) {
			}
		})
		

	
		let choosejob = !this.data.choosejob
		this.setData({
			choosejob:choosejob
		})
	
	},

	/**
	 * 生命周期函数--监听页面加载
	 */
	onLoad: async function (options) {
	
		console.log(this.data.invitejob.length);

		this.setData({
			inlth:this.data.invitejob.length
		})
		Loading.begin()
		let candidateOpenid = options.candidateOpenid;
		let openid = wx.getStorageSync('openid');
		console.log(openid)
		let jobs =[];
		await app.getOpenidReady();
		try {
			// 加载数据
			let userCandidateData = await userCandidateService.loadEntityById(candidateOpenid);
		
			let bruser = await userCandidateService.loadEntityById(openid);
			let uc = userCandidateData.data;
			let communityListData = await candidateForCommunityService.loadListByCandidateOpenid(candidateOpenid)
			let categoryListData = await candidateForCategoryService.loadListByCandidateOpenid(candidateOpenid);
			let qwdq = '';
			communityListData.data.forEach((v, i) => {
				qwdq += v.communityName;
				if (i != communityListData.data.length-1) {
					qwdq += ','
				}
			})
			let yxjobname = '';
			categoryListData.data.forEach((v, i) => {
				yxjobname += v.categoryName;
				if (i != categoryListData.data.length-1) {
					yxjobname += ','
				}
			})
			this.setData({
				ypzid:candidateOpenid,
	
				tximg: url_util.isImageUrlInServer(uc.portraitPath) ?
					app.globalData.web_path + uc.portraitPath : uc.portraitPath,
				name: uc.realName,
				callname:bruser.data.realName,
				sex: CONSTANT.genderList[uc.gender],
				year: string_util.isEmpty(uc.birthday) ? '' : date_util.getAgeByBirthday(uc.birthday) + '岁',
				gznl: '', // TODO 10分钟前活跃
				yxjobname: yxjobname,
				ygz: new CONSTANT.Salary(uc.expectSalaryMin, uc.expectSalaryMax).value,
				qwdq: qwdq,
				grjs: uc.introduction,
				cellphne: uc.telephone,
			})
		} catch (e) {
			console.error(e);
		}
		Loading.end();
	},

	/**
	 * 生命周期函数--监听页面初次渲染完成
	 */
	onReady: function () {

	},

	/**
	 * 生命周期函数--监听页面显示
	 */
	onShow:async function () {
		let that = this;
		let openid = wx.getStorageSync('openid');
		console.log(openid)
		let jobs =[];
		let userRecruiter =await userRecruiterService.loadEntityById(openid);
		console.log(userRecruiter.data.companyUuid)
		let companyJob =await recruitJobService.loadListByCompanyUuid(userRecruiter.data.companyUuid);
		console.log(companyJob.data)
	
			for(var i=0;i<companyJob.data.length;i++){
				let money=new CONSTANT.Salary(companyJob.data[i].jobSalaryMin,companyJob.data[i].jobSalaryMax)
				var job ={jobname:companyJob.data[i].categoryName,jobmoney:money.value,id:companyJob.data[i].id}
				jobs.push(job)
			}
			console.log(jobs)
			that.setData({
				invitejob:jobs,
				companyUuid:userRecruiter.data.companyUuid
			})
	},

	/**
	 * 生命周期函数--监听页面隐藏
	 */
	onHide: function () {

	},

	/**
	 * 生命周期函数--监听页面卸载
	 */
	onUnload: function () {

	},

	/**
	 * 页面相关事件处理函数--监听用户下拉动作
	 */
	onPullDownRefresh: function () {

	},

	/**
	 * 页面上拉触底事件的处理函数
	 */
	onReachBottom: function () {

	},

	/**
	 * 用户点击右上角分享
	 */
	onShareAppMessage: function (res) {
		if (res.from === 'button') {
			// 来自页面内转发按钮
			title = "这个是页面自定义的分享事件~";
			// imageUrl='***.png';
		}
		if (res.from === 'menu') {
			title = "这个是页面右上角的分享事件~";
			// imageUrl='***.png';
		}
	},
	onShareTimeline(res) {
		console.log(res)
	}
})