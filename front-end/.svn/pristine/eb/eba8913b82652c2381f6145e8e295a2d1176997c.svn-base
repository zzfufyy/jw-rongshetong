// pages/sqfw/sqfw.js
// 加载 常量
const CONSTANT = require('../../common/constant');
const GLOBAL_CONSTANT = require('../../common/globalConstant');
let $ = require('../../utils/request_util');
// 加载 工具
const date_util = require('../../utils/date_util');
const img_util = require('../../utils/img_util');
const Loading = require('../../utils/loading_util');
const string_util = require('../../utils/string_util');
const {
    Completer
} = require('../../utils/function_util');
const prompt_util = require('../../utils/prompt_util');
// 加载 服务
const informationNewsService = require('../../common/informationNewsService');
const communityInformationService = require('../../common/communityInformationService');
const userCommunityService = require("../../common/userCommunityService");
const functionTagService = require("../../common/functionTagService");
const userForFunctionTagService = require("../../common/userForFunctionTagService");
const globalService = require('../../common/globalService');
const iUserRoleService = require('../../common/iUserRoleService');
const userRecruiterService  = require('../../common/userRecruiterService');
const recruitCompanyService  = require('../../common/recruitCompanyService');
// 附加模块
const listener = require('./listener');

const app = getApp();
Page({

    /**
     * 页面的初始数据
     */
    data: {

        hiddenBindCompanyInfo: true,
        hiddenChooseIdentity: true,


        openid: '',
        pagePathApply: '',
        // 社区用户授权级别  0:普通 1: 社区管理员 2: 网格录入员
        authorizationLevel: 0,
        hasUserForFunctionTag: false,
        // 角色选择
        juesehide: true,
        streetName: '',
        districtName: '',
        cityName: '',
        provinceName: '',
        scene: "",
        communityUuid: '',
        communityName: '', //communityName: '东湖社区',
        communityAddress: '', //communityAddress: '湖南省长沙市芙蓉区晚报西街13号',
        communityPhone: '',
        communityPortraitPath: '',
        // recruiterOpenid: "",
        // companyUuid: "",
        // categoryUuid: "",
        isInformationCollectPermission: false,
        ewmimg: '',
        functionTagList: [
            // { tagId: 'sygl', tagName: '诉源治理', pagePathLink: '/pages/syzl/syzl', backgroundColor: '#EEF7FE', logoPathBig: '/img/syzl.png', },
            // { tagId: 'zphui', tagName: '招聘会', pagePathLink: '/pages/zphlist_copy/zphlist_copy', backgroundColor: '#EEF7FE', logoPathBig: '/img/zphuiicon.png', },
            // { tagId: 'tagCandidateRecruit', tagName: '求职就业', pagePathLink: '/pages/comzp/comzp', backgroundColor: '#FEFAEE', logoPathBig: '/img/qzjy.png', },
            // { tagId: 'tagCompanyRecruit', tagName: '企业招聘', pagePathLink: '/pages/qzjy/qzjy', backgroundColor: '#EEF7FE', logoPathBig: '/img/qyzp.png', },

            // { tagId: 'tagCellInput', tagName: '网格录入', pagePathLink: '/pages/wglr/wglr', backgroundColor: '#F3EEFC', logoPathBig: '/img/wglr.png', },
            // { tagId: 'tagCommunityManagement', tagName: '社区管理', pagePathLink: '/pages/sqgl/sqgl', backgroundColor: '#EEFBFE', logoPathBig: '/img/sqgl.png', },
            // { tagId: 'tagRongEDai', tagName: '蓉e贷', pagePathLink: '', backgroundColor: '#F5FFE8', logoPathBig: '/img/ryd.png', target: 'miniProgram', apptagId: 'wx96d6e30c9f677d52' },
            // { tagId: 'tagInformationCollect', tagName: '自建房信息采集', pagePathLink: '/pages/messgecollect/messgecollect', backgroundColor: '#EEF7FE', logoPathBig: '/img/xxcj.png', tp: '-13px' },
        ],
        // 资讯列表
        newsList: [
            // {
            // 	articleTitle: '春风送温暖 就业送真情',
            // 	articleIntroduction: '【湖南省】关于印发《湖南省“十四五”金融业发展规划》的通知湖南省地方金融监督管理局关于印发《湖南省“十四五”金融业发展规划》的通知',
            // 	articleAuthor: '岳麓区就业服务中心',
            // 	articleReleaseTime: '3月02日',
            // 	articlePortraitPath: 'http://frqryb.oss-accelerate.aliyuncs.com/headphoto/16297916583243346b1330ea-9a71-4ea4-85d0-02c7556c3b40.jpeg'
            // },
        ],
    },


    /** BEGIN 页面绑定事件 */
    bindtapTagNewsAnnouncement() {
        wx.navigateTo({
            url: '/pages/newsms/newsms?communityUuid=' + this.data.communityUuid,
        })
    },
    binderrorCommunityPortraitPath(e) {
        console.log(e);
        this.setData({
            communityPortraitPath: CONSTANT.STATIC_IMG_URL.portrait_community,
        })
    },
    binderrorArticlePortraitPath(e) {
        console.log(e);
        let img = 'newsList[' + e.currentTarget.dataset.index + '].articlePortraitPath';
        this.setData({
            [img]: CONSTANT.STATIC_IMG_URL.portrait_news,
        })
    },

    bindtapGoLink: async function(e) {
        let id = e.currentTarget.dataset.id;
        let linkUrl = this.data.functionTagList.find(v => {
            return id == v.tagId;
        }).pagePathLink;
        console.info(`Choose the tag navigateTo: ${id}`);
        switch (id) {
            // 企业招聘  求职就业
            case 'tagRecruitCompany':
                linkUrl += ('?communityUuid=' + this.data.communityUuid);
                break;
            case 'tagRecruitCandidate':
                linkUrl += ('?communityUuid=' + this.data.communityUuid);
                break;
            case 'tagNewsAnnouncement':
                linkUrl += ('?communityUuid=' + this.data.communityUuid);
                break;
            case 'tagHouseInformationCollect':
                linkUrl += ('?communityUuid=' + this.data.communityUuid);
                break;
            case 'tagVoteActivity':
                linkUrl += ('?communityUuid=' + this.data.communityUuid);
                break;
                // 网格录入
            case 'tagGridManage':
                wx.setStorageSync(GLOBAL_CONSTANT.GLOBAL_FLAG_ENTRY_GRID_OR_COMMUNITY, 'grid');
                if (this.data.authorizationLevel == CONSTANT.AUTHORIZATION_LEVEL.COMMUNITY_ADMIN ||
                    this.data.authorizationLevel == CONSTANT.AUTHORIZATION_LEVEL.COMMUNITY_RECORDER) {
                    console.log(this.data.communityUuid);
                    linkUrl += ('?communityUuid=' + this.data.communityUuid);
                } else {
                    wx.showModal({
                        title: '您没有网格录入的权限',
                        icon: 'error',
                    })
                    return;
                }
                break;
                // 社区管理
            case 'tagCommunityManage':
                wx.setStorageSync(GLOBAL_CONSTANT.GLOBAL_FLAG_ENTRY_GRID_OR_COMMUNITY, 'community');
                if (this.data.authorizationLevel == CONSTANT.AUTHORIZATION_LEVEL.COMMUNITY_ADMIN) {
                    linkUrl += ('?communityUuid=' + this.data.communityUuid);
                }else if (this.data.authorizationLevel == CONSTANT.AUTHORIZATION_LEVEL.ALL_ADMIN) {
                  linkUrl += ('?communityUuid=' + this.data.communityUuid);
                }else {
                    wx.showModal({
                        title: '您没有社区管理的权限',
                        icon: 'error',
                    })
                    return;
                }
                break;
            case 'tagPersonalCenterCommunity':
                // 重置 身份切换完成器
                this.setData({
                    hiddenChooseIdentity: false,
                })
                this.identitySwitchCompleter = new Completer();
                await this.identitySwitchCompleter.promise;
                // 如果是招聘者  修改路由到
                if (wx.getStorageSync(GLOBAL_CONSTANT.GLOBAL_USER_IDENTITY) == CONSTANT.UserRole.Recruiter) {
                    // 判断是否有公司
                    let userRecruiterInfo = (await userRecruiterService.loadEntityById(this.data.openid)).data;
                    let companyUuid = userRecruiterInfo.companyUuid;
                    if (string_util.isEmpty(companyUuid)) {
                        console.debug(`User Openid: ${this.data.openid} hasn't register Company`);
                        let tryBindCompanyRes = await prompt_util.showModalPrompt("是否尝试绑定后台已有公司")
                        if (tryBindCompanyRes.confirm) {
                            console.log("点击确定");
                            // 弹窗获取电话号码授权
                            this.bindCompanyCompleter = new Completer();
                            this.setData({
                                hiddenBindCompanyInfo: false
                            })
                            let bindRes = await this.bindCompanyCompleter.promise;
                            if (!bindRes) {
                                linkUrl = '/pages/qyzc/qyzc';
                                console.debug(`用户绑定后台公司失败， 前往企业注册页面: ${linkUrl}`);
                            }
                        } else {
                            // 企业注册
                            linkUrl = '/pages/qyzc/qyzc';
                            console.debug(`用户取消绑定后台公司信息， 前往企业注册页面: ${linkUrl}`);
                        }
                    } else {
                        console.debug(`User Openid: ${this.data.openid} has CompanyUuid: ${companyUuid}`);
                        let recruitCompanyInfo = (await recruitCompanyService.loadEntityById(companyUuid)).data;
                        // 已认证
                        if (recruitCompanyInfo.flagIdentification == 1) {
                            // 不修改路由
                        } else {
                            linkUrl = '/pages/waiteyz/waiteyz';
                        }
                    }
                }
                break;
            default:
                break;
        }
        console.info(`page navigateTo the page: ${linkUrl}`);
        wx.navigateTo({
            url: linkUrl,
        })
    },
    // 更多功能
    bindtapGoMoreFunction(e) {
        let that = this;
        wx.navigateTo({
            url: '/pages/test/test?communityUuid=' + that.data.communityUuid,
        })
    },
    // 打电话
    bindtapCommunityCellphone: function () {
        let phone = this.data.communityPhone;
        wx.makePhoneCall({
            phoneNumber: phone,
        });
    },
    // 咨询详情
    bindtapAllNews(e) {
        console.log(e);
        let newsUuid = e.currentTarget.id;
        wx.navigateTo({
            url: '/pages/zxxq/zxxq?newsUuid=' + newsUuid,
        })
    },
    bindtapChooseCandidate: async function () {
        await iUserRoleService.turnToCandidate();
        this.setData({
            hiddenChooseIdentity: true,
        })
        this.identitySwitchCompleter.resolve();
    },
    bindtapChooseRecruiter: async function () {
        await iUserRoleService.turnToRecruiter();
        this.setData({
            hiddenChooseIdentity: true,
        })
        this.identitySwitchCompleter.resolve();
    },
    bindgetphonenumberRecruiter: async function (e) {
        console.log(e);
        if (e.detail.encryptedData) {
            // 用户同意授权
            let sessionKey = wx.getStorageSync('sessionKey')
            let openid = wx.getStorageSync('openid')
            let res = await wx.request({
                url: app.globalData.web_path + '/wx/user/' + app.globalData.appId + '/phoneNumberInfo',
                data: {
                    sessionKey: sessionKey,
                    iv: e.detail.iv,
                    encryptedData: e.detail.encryptedData,
                },
                header: app.globalData.header,
                success: res => {
                    console.log(res);
                    this.setData({
                        telephone: res.data.data.phoneNumber
                    })
                    wx.setStorageSync('phone', res.data.data.phoneNumber)
                }
            })
            console.log(res);

        } else {
            wx.showToast({
                title: '用户取消授权',
                icon: 'error',
                duration: 1200,
                mask: true,
            });
            return;
        }

    },
    bindtapSubmitBindCompany: async function () {
        if (string_util.isEmpty(this.data.telephone)) {
            wx.showToast({
                title: '请先授权电话',
                icon: 'error',
                duration: 1200,
                mask: true,
            });
        } else {
            // 尝试绑定电话并回填
            let recruitCompanyInfo = (await recruitCompanyService.infoByRecruiterPhone(this.data.telephone)).data;
            if (recruitCompanyInfo) {
                console.log(recruitCompanyInfo);
                console.log(this.data.openid);
                // 获取到绑定公司  进行回填
                await userRecruiterService.updateByEntity({
                    id: this.data.openid,
                    companyUuid: recruitCompanyInfo.id,
                });
                console.log('绑定成功');
                this.setData({
                    hiddenBindCompanyInfo: true,
                });
                this.bindCompanyCompleter.resolve(true);
            } else {
                this.setData({
                    hiddenBindCompanyInfo: true,
                });
                setTimeout(() => wx.showToast({
                    title: '没有绑定公司',
                    icon: 'error',
                    duration: 1200,
                    mask: true,
                }), 1300);

                this.bindCompanyCompleter.resolve(false);
            }
            this.bindCompanyCompleter.resolve(false);
        }
    },
    bindtapSkipBindCompany: async function () {
        // 关闭弹窗
        this.setData({
            hiddenBindCompanyInfo: true,
        })
        this.bindCompanyCompleter.resolve(false);
    },
    /** END 页面绑定事件 */
    async _loadFunctionTag() {
        // 默认用户功能列表
        let functionTagData = await functionTagService.listByDefaultOrder(this.data.pagePathApply, this.data.communityUuid);
        functionTagData = functionTagData.data;
        let originFunctionTagList = functionTagData;
        console.log(originFunctionTagList);
        let userForFunctionTagData = await userForFunctionTagService.loadEntityByUserAndPath(this.data.openid, this.data.pagePathApply);
        userForFunctionTagData = userForFunctionTagData.data;
        this.setData({
            hasUserForFunctionTag: (!userForFunctionTagData) ? false : true,
        })
        if (this.data.hasUserForFunctionTag) {
            let idList = string_util.splitBySemiColon(userForFunctionTagData.functionTagId);
            this.setData({
                functionTagList: idList.map(v => {
                    return originFunctionTagList.find(r => {
                        return v == r.id;
                    })
                }).filter((v, i) => {
                    return i <= 6
                }),
            })
        } else {
            this.setData({
                functionTagList: originFunctionTagList.filter((v, i) => {
                    return i <= 6
                }),
            })
        }
    },

    /**
     * 生命周期函数--监听页面卸载
     */
    onUnload: function () {
        app.globalMonitors.communityInfoChangeMonitor.removeListener(this.communityInfoChangeListener);
        app.globalMonitors.functionTagChangeMonitor.removeListener(this.functionTagChangeListener);
    },

    /**
     * 生命周期函数--监听页面加载
     */
    state: {
        communityUuidCompleter: new Completer(),
    },
    identitySwitchCompleter: new Completer(), // 身份切换完成器
    bindCompanyCompleter: new Completer(), // 绑定公司完成器
    onLoad: async function (options) {
        // 添加社区基本信息是否修改监听器（）
        app.globalMonitors.communityInfoChangeMonitor.addListener(this.communityInfoChangeListener);
        app.globalMonitors.functionTagChangeMonitor.addListener(this.functionTagChangeListener);
        this.state.communityUuidCompleter = new Completer();

        let that = this;
        let communityUuid = "";
        const scene = decodeURIComponent(options.scene)
        console.log(scene)
        let ext1 = scene;
        if (typeof (ext1) != 'undefined') {
            console.log(scene)
            await this.getcommuit(ext1, that)
        }

        if (string_util.isNotEmpty(options.communityUuid)) {
            // 尝试从参数获取
            communityUuid = options.communityUuid;
        } else {
            // 尝试从全局获取
            communityUuid = globalService.getGlobalCommunityUuid();
        }
        if (string_util.isEmpty(communityUuid)) {
            console.error(`参数、全局均获取不到communityUuid: ${communityUuid}`);
        } else {
            // 重设全局communityUuid
            globalService.setGlobalCommunityUuid(communityUuid);
        }
        console.info(`当前社区id为：${this.data.communityUuid}`);
        that.setData({
            communityUuid: communityUuid,
        });
        this.state.communityUuidCompleter.resolve(that.data.communityUuid);

        //获取社区banner图
        wx.request({
            url: app.globalData.web_path + '/banner_for_page/searchCommunityBanner',
            data: {
                communityUuid: that.data.communityUuid
            },
            header: app.globalData.header,
            success: function (res) {
                console.log(res)
                let images = res.data.bannerForPageList;
                let backgroundimg1 = [];
                let backgroundimg = [];
                let ewm = "";
                for (let i = 0; i < images.length; i++) {
                    const element = images[i];
                    var image = {
                        imgsrc: images[i].bannerImgPath,
                        url: images[i].pagePath
                    }
                    backgroundimg1.push(image)
                    backgroundimg.push(image)
                }
                // console.log(images)
                if (images.length > 0) {
                    ewm = images[0].bannerImgPath
                }
                console.log(ewm)
                that.setData({
                    ewmimg: ewm
                    // backgroundimg1:backgroundimg1,
                    // backgroundimg:backgroundimg
                })
            },
            fail: function (res) {}
        })
        console.debug(that.data.communityUuid)


        // 加载用户事件
        await app.getOpenidReady();
        let openid = wx.getStorageSync(GLOBAL_CONSTANT.GLOBAL_OPENID);
        this.setData({
            openid: openid
        });
        // 用户授权
        this.authorize = this.selectComponent("#authorize");
        let authorizeRs = await this.authorize.doAuthorize();
        if (!authorizeRs) {
            prompt_util.authorizeNamePortraitFailPrompt();
        }


        // 加载用户功能列表
        let pages = getCurrentPages();
        let pagePathApply = pages[pages.length - 1].route;
        this.setData({
            pagePathApply: pagePathApply
        });
        try {
            Loading.begin();
            await this._loadFunctionTag();
            await this.loadContent();
            wx.setNavigationBarTitle({
                title: that.data.communityName
            })
        } catch (e) {
            console.error(e);
        } finally {
            Loading.end();
        }
    },

    /**
     * 生命周期函数--监听页面显示
     */
    onShow: async function () {

    },
    getcommuit: async function (ext1, that) {
        let completer = new Completer();
        wx.request({
            url: app.globalData.web_path + '/banner_for_page/searchCommunity',
            data: {
                ext1: ext1
            },
            header: app.globalData.header,
            success: function (res) {
                console.log(res)
                if (res.data.communityInformationList.length > 0) {
                    communityUuid = res.data.communityInformationList[0].id;
                    that.setData({
                        communityUuid: communityUuid,
                    });
                }
                completer.resolve();
            },
            fail: function (res) {
                completer.resolve();
            }
        })
        return completer.promise;
    },
    // 加载页面内容
    loadContent: async function () {
        // 加载 社区用户 权限
        await app.getOpenidReady();
        let openid = wx.getStorageSync(GLOBAL_CONSTANT.GLOBAL_OPENID);

        let communityUuid = await this.state.communityUuidCompleter.promise;
        console.log(communityUuid);
        let userCommunityData = await userCommunityService.loadEntityById(openid);
        userCommunityData = userCommunityData.data;
        console.log(userCommunityData);
        if(userCommunityData.authorizationLevel==3){
            this.setData({
              authorizationLevel: userCommunityData.authorizationLevel,
          })
        }else{
          this.setData({
            authorizationLevel: (communityUuid == userCommunityData.communityUuid) ? userCommunityData.authorizationLevel : 0,
           })
        }
        
        // 社区信息加载
        let communityData = await communityInformationService.loadEntityById(communityUuid);
        communityData = communityData.data;
        console.log(communityData)
        this.setData({
            communityUuid: communityData.id,
            communityName: communityData.communityName,
            streetName: communityData.streetName,
            districtName: communityData.districtName,
            cityName: communityData.cityName,
            provinceName: communityData.provinceName,
            communityAddress: communityData.address,
            communityPhone: communityData.phone,
            communityPortraitPath: img_util.handleCommunityPortraitPath(communityData.portraitPath),
        });

        // 新闻加载
        let newsData = await informationNewsService.loadListByCommunityUuid(" ", 3);

        let newsList = newsData.data.map(v => {
            return {
                id: v.id,
                articleTitle: v.articleTitle,
                articleIntroduction: v.articleIntroduction,
                articleAuthor: v.articleAuthor,
                articleReleaseTime: date_util.dateToCN(v.articleReleaseTime),
                articlePortraitPath: img_util.handleArticlePortraitPath(v.articlePortraitPath),
            }
        });
        let newsData1 = await informationNewsService.loadListByCommunityUuid(communityUuid, 3);
        let newsList1 = newsData1.data.map(v => {
            return {
                id: v.id,
                articleTitle: v.articleTitle,
                articleIntroduction: v.articleIntroduction,
                articleAuthor: v.articleAuthor,
                articleReleaseTime: date_util.dateToCN(v.articleReleaseTime),
                articlePortraitPath: img_util.handleArticlePortraitPath(v.articlePortraitPath),
            }
        });
        for (let index = 0; index < newsList1.length; index++) {
            newsList.push(newsList1[index])

        }
        console.log(newsList);
        this.setData({
            newsList: newsList,
        });

    },
    /**
     * 生命周期函数--监听页面初次渲染完成
     */
    onReady: function () {

    },


    /**
     * 生命周期函数--监听页面隐藏
     */
    onHide: function () {

    },


    /**
     * 页面相关事件处理函数--监听用户下拉动作
     */
    onPullDownRefresh: function () {

    },

    /**
     * 页面上拉触底事件的处理函数
     */
    onReachBottom: function () {

    },

    /**
     * 用户点击右上角分享
     */
    onShareAppMessage: function () {

    },
    ...listener.createListenerMethods(),
})