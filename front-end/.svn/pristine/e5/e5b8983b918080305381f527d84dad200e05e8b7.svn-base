// pages/zwxq/zwxq.js
const $ = require('../../utils/request_util');
// 常量
const CONSTANT = require('../../common/constant');
const { Salary } = require('../../common/constant');
const GLOBAL_CONSTANT = require('../../common/globalConstant');
// 工具
const string_util = require('../../utils/string_util');
const img_util = require('../../utils/img_util');
const Loading = require('../../utils/loading_util');
// 加载服务
const userRecruiterService = require('../../common/userRecruiterService');
const userCandidateService = require('../../common/userCandidateService');
const recruitCompanyService = require('../../common/recruitCompanyService');
const recruitJobService = require('../../common/recruitJobService');
const recruitRecordService = require('../../common/recruitRecordService');
const userStateService = require('../../common/userStateService');
const iUserRoleService = require('../../common/iUserRoleService');
const iAuthorizeService = require('../../common/iAuthorizeService');
const listener = require('./listener');
const app = getApp();



Page({

    /**
     * 页面的初始数据
     */
    data: {


        showshare:true,
        // 求职者信息
        flagWhoReceive: 1,

        // 各个id
        candidateOpenid: '',
        candidateTelephone: '',

        recruiterName: '',
        recruiterPortrait: '',

        recruiterOpenid: '',
        companyUuid: '',
        jobUuid: '',
        categoryUuid: '',
        // 招聘者信息
        jobName: '',
        salaryScope: '',
        jobyq: { rs: '' },
        // jobName: '清洁工',
        // salaryScope: '3000-3800',
        // jobyq: { rs: '招1人' },
        // jobyq: { rs: '招1人', nl: '30-45', worknj: '3-5', xl: '学历不限' },
        xqxq: '',
        // xqxq: '1.工作职责: 室内保洁人员主要负责办公楼、仪电楼、化工楼内公共区域的清扫工作。 室外保洁	2.卫生标准及要求:3.室内保洁: 保持走廊地面无脚印、无口香糖印,夏季地面无土,冬季无结冰下',
        location: '',
        // location: '银盆岭社区长沙市岳麓区国际公寓A座1917',
        companyName: '',
        conadrres: '',
        portraitPath: '',
        recruiterTelephone: '',
        userIdentity: "",

        hideRecruitingJob: false,
        distance: '',
        countView: 0,
        countJob: 0,
        realName: "",
        latitude: 23.099994,
        longitude: 113.324520,
        //判断是否是求职者
        jobWant: false,
        

        img: "/img/bigimg.jpg",
        wechat: "/img/pyq.png",
        xiazai: "/img/wxhy.png",
        share:"/img/share.png",
        maskHidden: false,
        name: "张先生",
        hr: "招聘专员",
        comname: "长沙星沙文和友餐饮文化",
        job: "店长/经理",
        money: "5000-8000元/月",

    },
    //将canvas转换为图片保存到本地，然后将图片路径传给image图片的src
    createNewImg: function () {
        var that = this;
        var context = wx.createCanvasContext('mycanvas');
        //设置背景图
        var path = "/img/bigimg.jpg";
        context.drawImage(path, 0, 0, 375, 734);
        // 设置白色背景图
        var pathwhite = "/img/whitebg.png";
        context.drawImage(pathwhite, 19, 421, 337, 218);
        //设置小程序码的图片
        var path5 = "/img/syewm.png";
        context.drawImage(path5, 270, 545,64,64);
        // 设置头像图片
        var path2 = "/img/qyyq.png";
        var avatarurl_width = 46;    //绘制的头像宽度
        var avatarurl_heigth = 46;   //绘制的头像高度
        var avatarurl_x = 39;   //绘制的头像在画布上的位置
        var avatarurl_y = 441;   //绘制的头像在画布上的位置
        context.save();
        context.beginPath(); //开始绘制
        //先画个圆   前两个参数确定了圆心 （x,y） 坐标  第三个参数是圆的半径  四参数是绘图方向  默认是false，即顺时针
        context.arc(avatarurl_width / 2 + avatarurl_x, avatarurl_heigth / 2 + avatarurl_y, avatarurl_width / 2, 0, Math.PI * 2, false);
        context.clip();//画好了圆 剪切  原始画布中剪切任意形状和尺寸。一旦剪切了某个区域，则所有之后的绘图都会被限制在被剪切的区域内 这也是我们要save上下文的原因
        context.drawImage(path2,39, 441, 46, 46); // 推进去图片，必须是https图片
        context.restore(); //恢复之前保存的绘图上下文 恢复之前保存的绘图上下午即状态 还可以继续绘制
        context.setStrokeStyle('rgba(134, 157, 156, 0)') 
        context.setLineWidth(0) 
        context.stroke();
        


        //绘制|
        // context.setFontSize(14);
        // context.setFillStyle('#333');
        // context.setTextAlign('left');
        // context.fillText("|", 146, 457);
        // context.font="normal bold 40px sans-serif"
        // context.stroke();

        //绘制招聘专员
        // context.setFontSize(14);
        // context.setFillStyle('#333');
        // context.setTextAlign('left');
        // context.fillText(that.data.hr, 165, 457);
        // context.stroke();

        
        //绘制姓名
        context.setFontSize(14);
        context.setFillStyle('#333');
        context.setTextAlign('left');
        context.fillText(that.data.recruiterName + ' | ' + that.data.hr, 96, 457);
        context.stroke();

        //绘制公司名
        context.setFontSize(14);
        context.setFillStyle('#999999');
        context.setTextAlign('left');
        context.fillText(that.data.companyName, 95, 480);
        context.stroke();

        //绘制工作名字
        context.setFontSize(18);
        context.setFillStyle('#333');
        context.setTextAlign('left');
        context.fillText(that.data.jobName, 39, 527);
        context.stroke();

        //绘制月薪
        context.setFontSize(18);
        context.setFillStyle('#F8424C');
        context.setTextAlign('left');
        context.fillText(that.data.salaryScope, 39, 557);
        context.stroke();

        //绘制提示语img
        var pathtsbox = "/img/tsbox.png";
        context.drawImage(pathtsbox, 39, 585,149,28);

        //绘制提示语 两者相差数为18
        context.setFontSize(12);
        context.setFillStyle('#333');
        context.setTextAlign('left');
        context.fillText("长按识别，查看职位详情", 45, 603);
        context.stroke();

        //绘制底部提示语
        context.setFontSize(16);
        context.setFillStyle('#fff');
        context.setTextAlign('left');
        context.fillText("长按保存图片后，可分享至朋友圈", 68, 674);
        context.stroke();


        context.draw();
        //将生成好的图片保存到本地
        setTimeout(function () {
        wx.canvasToTempFilePath({
            canvasId: 'mycanvas',
            success: function (res) {
            var tempFilePath = res.tempFilePath;
            that.setData({
                imagePath: tempFilePath,
                canvasHidden: true
            });
            },
            fail: function (res) {
            console.log(res);
            }
        });
        }, 200);
    },
    //点击保存到相册
    baocun: function () {
        var that = this
        wx.saveImageToPhotosAlbum({
        filePath: that.data.imagePath,
        success(res) {
            wx.showModal({
            content: '保存成功',
            showCancel: false,
            confirmText: '确定',
            confirmColor: '#333',
            success: function (res) {
                if (res.confirm) {
                console.log('用户点击确定');
                /* 该隐藏的隐藏 */
                that.setData({
                    maskHidden: false
                })
                }
            }, fail: function (res) {
                console.log(11111)
            }
            })
        }
        })
    },
    //点击生成
    formSubmit: function (e) {
        var that = this;
        this.setData({
            showshare: true
        });
        wx.showToast({
        title: '海报生成中...',
        icon: 'loading',
        duration: 1000
        });
        setTimeout(function () {
        wx.hideToast()
        that.createNewImg();
        that.setData({
            maskHidden: true
        });
        }, 1000)
    },
    // 点击关闭图片
    closeimg(){
        this.setData({
            maskHidden: false
        })
    },
    isshow(){
        let show = !this.data.showshare
        this.setData({
            showshare:show
        })
    },
    //投递简历
    async tdjl(e) {
        let switchRole = await iUserRoleService.trySwitchToCandidate();
        if (!switchRole) {
            return;
        }
        let that = this;
        if (string_util.isEmpty(this.data.candidateTelephone)) {
            wx.showModal({
                title: '提示',
                content: '请先在个人简历中填写联系方式',
                confirmText: "跳转",
                success: (res) => {
                    wx.navigateTo({
                        url: '/pages/jlxg/jlxg',
                    })
                },
                fail: () => {
                    console.log(用户点击取消)
                }

            });
            return;
        };
        console.log('用户点击确定')
        // 如果用户已经投递过
        let queryData = {
            candidateOpenid: that.data.candidateOpenid,
            jobUuid: that.data.jobUuid,
        }
        let countData = await recruitRecordService.countByEntity(queryData);
        console.log(countData)
        if (countData.data > 0) {
            wx.showToast({
                icon: 'none',
                title: `您已经投递过该职位`,
                duration: 2000,
            })
            return;
        }
        // 生成简历记录
        let insertData = {
            flagWhoReceive: that.data.flagWhoReceive,
            flowRecruit: 0, // 待查看
            candidateOpenid: that.data.candidateOpenid,
            recruiterOpenid: that.data.recruiterOpenid,
            companyUuid: that.data.companyUuid,
            jobUuid: that.data.jobUuid,
            categoryUuid: that.data.categoryUuid,
        }
        let insertPromise = recruitRecordService.insertByEntity(insertData);
        await insertPromise
            .then(r => console.log(r))
            .catch(r => console.error(r));
        // 生成投递记录
        await recruitJobService.increaseCountApply(that.data.jobUuid);
        // 通知 简历监听器
        app.globalMonitors.sendResumeMonitor.notifyAll(that.data.jobUuid)
        // 跳转到首页
        wx.showModal({
            title: '成功',
            content: '投递成功，是否返回上一页',
            success(res) {
                if (res.confirm) {
                    wx.navigateBack({
                        delta: 0,
                    })
                } else if (res.cancel) {
                    console.log('用户点击取消')
                }
            }
        })

    },
    binderrorRecruiterPortrait: function (e) {
        console.error(e);
        this.setData({
            portraitPath: Boolean(this.data.recruiterGender) ?
                CONSTANT.STATIC_IMG_URL.portrait_personal_female : CONSTANT.STATIC_IMG_URL.portrait_personal_male,
        })
    },
    // 视频面试
    msxx: async function (e) {
        debugger;
        // 尝试转换求职者身份
        let switchRole = await iUserRoleService.trySwitchToCandidate();
        if (!switchRole) {
            return;
        }
        // 是否能继续视频面试
        let isContinue = await iAuthorizeService.isCanVideoInterview();
        if (!isContinue) {
            return;
        }
        let that = this;
        wx.showModal({
            title: '提示',
            content: '是否确认进行视频面试',
            success(res) {
                if (res.confirm) {
                    let openid = wx.getStorageSync('openid')
                    wx.setEnable1v1Chat({
                        enable: true,
                        success: (e) => {
                            wx.join1v1Chat({
                                caller: {
                                    nickname: that.data.realName,
                                    openid: openid,
                                },
                                listener: {
                                    nickname: that.data.recruiterName,
                                    openid: that.data.recruiterOpenid,
                                },
                            });
                        },
                        fail: (e) => {
                            console.log(e)
                        }
                    })
                } else if (res.cancel) {
                    console.log('用户点击取消')
                }
            }
        })
    },
    //  错误头像 显示默认头像
    binderrorCompanyPortrait: function (e) {
        console.error(e);
        this.setData({
            portraitPath: CONSTANT.STATIC_IMG_URL.portrait_company,
        })
    },
    async callPhone(e) {
        let isContinue = await this._isUserRoleCandidate();
        if (!isContinue) {
            return;
        }
        console.log(this.data);
        wx.makePhoneCall({
            phoneNumber: this.data.recruiterTelephone,
        })
    },
    //在招职位
    bindtapRecruitingJob() {
        wx.navigateTo({
            url: '/pages/commessxq/commessxq?companyUuid=' + this.data.companyUuid,
        })
    },
    openMap: function () {
        let latitude = this.data.latitude
        let longitude = this.data.longitude
        wx.getLocation({
            type: 'gcj02', // 默认为 wgs84 返回 gps 坐标，gcj02 返回可用于 wx.openLocation 的坐标
            success: function (res) {
                // success
                console.log(res.latitude);
                console.log(res.longitude);
                wx.openLocation({
                    latitude: latitude, // 纬度，范围为-90~90，负数表示南纬
                    longitude: longitude, // 经度，范围为-180~180，负数表示西经
                    scale: 28, // 缩放比例
                    name: "要找的地方名字（某某饭店）",
                    address: "地址：要去的地点详细描述"
                })
            }
        })
    },




    /**
     * 生命周期函数--监听页面卸载
     */
    onUnload: function () {
        app.globalMonitors.candidateTelephoneChangeMonitor.removeListener(this.candidateTelephoneListener);
    },
    /**
     * 生命周期函数--监听页面加载
     */
    onLoad: async function (options) {

        app.globalMonitors.candidateTelephoneChangeMonitor.addListener(this.candidateTelephoneListener);
        let openid = wx.getStorageSync('openid');
        let userRole = wx.getStorageSync(GLOBAL_CONSTANT.GLOBAL_USER_IDENTITY);
        if (userRole) {
            this.setData({
                jobWant: userRole == 'user' ? true : false,
                userIdentity: userRole
            });
        } else {
            let userStateData = await userStateService.loadEntityById(openid);
            userStateData = userStateData.data;
            this.setData({
                jobWant: userRole == 'user' ? true : false,
            });
            let tmpIdent;
            switch (userStateData.userRole) {
                case 1: tmpIdent = 'user'; break;
                case 2: tmpIdent = 'company'; break;
                default: tmpIdent = 'vistor'; break;
            }
            this.setData({ userIdentity: tmpIdent });
        }
        let that = this;

        let recruitJobUuid = this.options.recruitJobUuid;
        let distance = this.options.distance;
        let hideRecruitingJob = this.options.hideRecruitingJob;
        this.setData({
            hideRecruitingJob: hideRecruitingJob,
            distance: string_util.isEmpty(distance) ? '未知距离' : distance,
        })
        // 获取用户openid
        await app.getOpenidReady();
        // let openid = wx.getStorageSync('openid');
        that.setData({
            candidateOpenid: openid,
        });
        Loading.begin();

        // 加载求职者信息
        try {
            let loadCandidateData = await userCandidateService.loadEntityById(openid);
            loadCandidateData = loadCandidateData.data;
            console.log(loadCandidateData)
            this.setData({
                candidateTelephone: loadCandidateData.telephone,
                realName: loadCandidateData.realName
            });
        } catch (e) {
            console.error(e);
        }

        let recruiterOpenid = '';
        // 加载岗位信息
        try {
            let jobData = await recruitJobService.loadEntityById(recruitJobUuid);
            // 增加浏览量
            await recruitJobService.increaseViewCount(recruitJobUuid);
            // TODO 增加浏览记录
            jobData = jobData.data;
            console.log(jobData)
            this.setData({
                // 公司id
                recruiterOpenid: jobData.recruiterOpenid,
                companyUuid: jobData.companyUuid,
                jobUuid: jobData.id,
                categoryUuid: jobData.categoryUuid,
                // 表单信息加载
                countView: jobData.countView + 1,
                jobName: jobData.jobName,
                salaryScope: new Salary(jobData.jobSalaryMin, jobData.jobSalaryMax).value,
                jobyq: { rs: '招 ' + jobData.recruitingNumber + ' 人' },
                xqxq: jobData.jobIntroduction,
                recruiterTelephone: jobData.recruiterTelephone,
            })
            recruiterOpenid = jobData.recruiterOpenid;
        } catch (e) {
            console.error(e);
        }
        // 加载在招职位 的数量(可优化 到加载公司)
        try {
            let countJob = await recruitJobService.countByCompanyUuid(this.data.companyUuid);
            countJob = countJob.data
            this.setData({
                countJob: countJob,
            })
        } catch (e) {
            console.error(e);
        }
        console.log('########: ' + this.data.countJob);

        // 加载招聘者信息
        try {
            let recruiterInfo = await userRecruiterService.loadEntityById(recruiterOpenid);
            recruiterInfo = recruiterInfo.data;
            this.setData({
                recruiterName: recruiterInfo.realName,
                recruiterGender: recruiterInfo.gender,
                recruiterPortrait: img_util.handlePersonnelPortraitPath(recruiterInfo.portraitPath, recruiterInfo.gender),
            })
        } catch (e) {
            console.error(e);
        }
        // 加载公司信息
        try {

            let companyData = await recruitCompanyService.loadEntityById(this.data.companyUuid);
            companyData = companyData.data;
            this.setData({
                companyName: companyData.companyName,
                location: companyData.address + '  ' + companyData.addressDetail,
                conadrres: companyData.address + '  ' + companyData.addressDetail,
                portraitPath: img_util.handleCompanyPortraitPath(companyData.portraitPath),
            })
        } catch (e) {
            console.error(e);
        }
        Loading.end();
    
    },

    /**
     * 生命周期函数--监听页面初次渲染完成
     */
    onReady: function () {

    },

    /**
     * 生命周期函数--监听页面显示
     */
    onShow: function () {
        var that = this;
        wx.getUserInfo({
          success: res => {
            console.log(res.userInfo, "huoqudao le ")
            this.setData({
              name: res.userInfo.nickName,
            })
          }
        })
    },

    /**
     * 生命周期函数--监听页面隐藏
     */
    onHide: function () {

    },



    /**
     * 页面相关事件处理函数--监听用户下拉动作
     */
    onPullDownRefresh: function () {

    },

    /**
     * 页面上拉触底事件的处理函数
     */
    onReachBottom: function () {

    },

    /**
     * 用户点击右上角分享
     */
    onShareAppMessage: function (res) {
        if (res.from === 'button') {
            // 来自页面内转发按钮
            title = "这个是页面自定义的分享事件~";
            // imageUrl='***.png';
        }
        if (res.from === 'menu') {
            title = "这个是页面右上角的分享事件~";
            // imageUrl='***.png';
        }
    },
    onShareTimeline(res) {
        console.log(res)
    },
    // 监听器方法相关
    ...listener.createListenerMethods(),
})